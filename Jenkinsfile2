pipeline{
    agent any
    tools{
        jdk 'jdk17'
        nodejs 'node16'
    }
    environment {
        SCANNER_HOME=tool 'sonar-scanner'
    }
    stages {
        stage('clean workspace'){
            steps{
                cleanWs()
            }
        }
        stage('Checkout from Git'){
            steps{
                git branch: 'main', url: 'https://github.com/accname/student-registration-form.git'
            }
        }
        stage("sonarqube Analysis "){
            steps{
                withsonarQubeEnv('sonar-server') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=student \
                    -Dsonar.projectKey=student '''
                }
            }
        }
        stage("quality gate"){
           steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token' 
                }
            } 
        }
        stage('Install Dependencies') {
            steps {
                sh "npm install"
            }
        }
       stage('TRIVY FS SCAN') {
            steps {
                sh "trivy fs . > trivyfs.txt"
            }
        }
        stage("Docker Build & Push"){
            steps{
                script{
                   withDockerRegistry(credentialsId: 'docker', toolName: 'docker'){   
                       sh "docker build -t student ."
                       sh "docker tag student accname/student:latest "
                       sh "docker push accname/student:latest "
                    }
                }
            }
        }
        stage("TRIVY"){
            steps{
                sh "trivy image accname/student:latest > trivyimage.txt" 
            }
        }
        stage('clear containers') {
            steps {
                sh 'docker compose down '
            }
        } 
        stage('run the application') {
            steps {
                sh 'docker compose up -d '
            }
        }

    }
        stage('Deploy to EKS') {
            steps {
                withCredentials([[
                $class: 'AmazonWebServicesCredentialsBinding',
                credentialsId: 'aws-cred'
                ]]) {
                sh '''
                aws eks update-kubeconfig --region us-east-1 --name tiru-cluster
                kubectl apply -f Kubernetes/ds.yml --validate=false
                '''
                }
            }
         }
    }
    post {
     always {
        emailext attachLog: true,
            subject: "'${currentBuild.result}'",
            body: "Project: ${env.JOB_NAME}<br/>" +
                "Build Number: ${env.BUILD_NUMBER}<br/>" +
                "URL: ${env.BUILD_URL}<br/>",
            to: 'gmailaccountname@gmail.com',
            attachmentsPattern: 'trivyfs.txt,trivyimage.txt'
        }
    }
}
